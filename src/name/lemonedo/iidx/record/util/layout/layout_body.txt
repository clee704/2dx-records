<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8;">
  <title>CS beatmania IIDX Records</title>
  <style type="text/css">
    body { font-size: 15px; color: #ffffff; background-color: #000000; }
    tr { text-align: right; background-color: #%5$s; }
    tr.label { background-color: #%6$s; }
    th { font-size: 13px; padding: 2px; }
    th.ex { width: 200px; }
    th.notes { width: 44px; }
    td { padding: 1px 3px 1px 3px; }
    td.SN { text-align: center; color: #0099FF; }
    td.DN { text-align: center; color: #0099FF; }
    td.SH { text-align: center; color: #ffaa00; }
    td.DH { text-align: center; color: #ffaa00; }
    td.SA { text-align: center; color: #FF3333; }
    td.DA { text-align: center; color: #FF3333; }
    td.old { padding-left: 8px; }
    td.new { padding-left: 8px; color: #ffdd00; }
    td.graph { text-align: left; font-size: 0px; padding: 0px; background-image: url('graphbg.gif'); background-repeat: repeat-y; height: 8px; }
    img { vertical-align: text-bottom; }
    img.graph { height: 8px; opacity: 0.4; filter: alpha(opacity=40); }
    a { cursor: pointer; }
  </style>
</head>
<body>
  <h2>CS %1$s Records</h2>
%2$s  <h4>Abbreviations in Records (all images are from http://iidx.cc/cs)</h4>
  <ul>
    <li>M: Play Mode</li>
    <li>DIFF: Difficulty</li>
    <li>DJL: DJ Level</li>
    <li>COMBO: Max Combo</li>
    <li>MISS: Miss Count</li>
    <li>PLAY: Play Count</li>
    <li>ASSIST: Assist Clear</li>
    <li><img src="easy.gif" alt="EASY">: Easy Clear</li>
    <li><img src="hard.gif" alt="HARD">: Hard Clear</li>
    <li><img src="fc.png" alt="FC">: Full Combo</li>
    <li><img src="pf.png" alt="PERFECT">: Perfect</li>
    <li><img src="a.png" alt="A">: DJ Level A</li>
    <li><img src="aa.png" alt="AA">: DJ Level AA</li>
    <li><img src="aaa.png" alt="AAA">: DJ Level AAA</li>
  </ul>
  <script type="text/javascript">
  <!--
    function record(title, oldSong, playMode, difficulty, djLevel, exScore, scoreRate,
                    totalNotes, just, great, good, bad, poor, clear, maxCombo, missCount, playCount) {
      r = new Object();
      r['title'] = title;
      r['oldSong'] = oldSong;
      r['playMode'] = playMode;
      r['difficulty'] = difficulty;
      r['djLevel'] = djLevel;
      r['exScore'] = exScore;
      r['scoreRate'] = scoreRate;
      r['totalNotes'] = totalNotes;
      r['just'] = just;
      r['great'] = great;
      r['good'] = good;
      r['bad'] = bad;
      r['poor'] = poor;
      r['clear'] = clear;
      r['maxCombo'] = maxCombo;
      r['missCount'] = missCount;
      r['playCount'] = playCount;
      return r;
    }

    function writeRecords(recordId) {
      var rows = document.getElementById(recordId).getElementsByTagName('tr');
      for (var i = 1; i < rows.length; i += 2) {
        var cells = rows[i].getElementsByTagName('td');
        var r = records[recordId][parseInt(i / 2)];
        cells[0].innerHTML = r['title'];
        cells[0].className = r['oldSong'] ? 'old' : 'new';
        cells[1].innerHTML = r['playMode'];
        cells[1].className = r['playMode'];
        cells[2].innerHTML = r['difficulty'];
        cells[4].innerHTML = toImgTag(r['djLevel']);
        cells[5].innerHTML = r['exScore'] + ' <small>(' + r['scoreRate'].toFixed(2) + '%%)<\/small>';
        cells[3].innerHTML = r['totalNotes'];
        cells[6].innerHTML = r['just'];
        cells[7].innerHTML = r['great'];
        cells[8].innerHTML = r['good'];
        cells[9].innerHTML = r['bad'];
        cells[10].innerHTML = r['poor'];
        cells[11].innerHTML = toImgTag(r['clear']);
        cells[12].innerHTML = r['maxCombo'];
        cells[13].innerHTML = r['missCount'];
        cells[14].innerHTML = r['playCount'];
        var graph = rows[i + 1].firstChild.firstChild;
        graph.width = parseInt(1.98 * r['scoreRate']);
      }
    }

    function toImgTag(s) {
      switch (s) {
      case 'A':
        return '<img src="a.png" alt="A">';
      case 'AA':
        return '<img src="aa.png" alt="AA">';
      case 'AAA':
        return '<img src="aaa.png" alt="AAA">';
      case 'EASY':
        return '<img src="easy.gif" alt="EASY">';
      case 'HARD':
        return '<img src="hard.gif" alt="HARD">';
      case 'FC':
        return '<img src="fc.png" alt="FC">';
      case 'PERFECT':
        return '<img src="pf.png" alt="PERFECT">';
      default:
        return s;
      }
    }

    var comparators = new Object();
    var orders = new Object();
    var lastSorted = new Object();
    var defaultCompareFunction = function (e1, e2) { return e1 - e2; }

    function setOrder(compId, value) {
      for (x in recordIds)
        orders[recordIds[x]][compId] = value;
    }

    function createComparator(compId, compareFunction) {
      if (arguments.length == 1)
        compareFunction = defaultCompareFunction;
      comp = function (recordId) { return function (e1, e2) { return orders[recordId][compId] * compareFunction(e1[compId], e2[compId]); } }
      comparators[compId] = comp;
      setOrder(compId, -1);
    }

    function sort(recordId, compId) {
      ensureOrder(recordId, compId);
      records[recordId].sort(comparators[compId](recordId));
      writeRecords(recordId);
    }

    function ensureOrder(recordId, compId) {
      if (lastSorted[recordId] == compId)
        orders[recordId][compId] = -orders[recordId][compId];
      lastSorted[recordId] = compId;
    }

    function compareStringIgnoreCase(s1, s2) {
      s1 = s1.toLowerCase();
      s2 = s2.toLowerCase();
      if (s1 < s2)
        return -1;
      else if (s1 == s2)
        return 0;
      else
        return 1;
    }

    function compareValue(v1, v2) {
      if (v1 == '-')
        if (v2 == '-')
          return 0;
        else
          return 1;
      if (v2 == '-')
        return -1;
      v1 = (v1 == '8+' ? 9 : v1);
      v2 = (v2 == '8+' ? 9 : v2);
      return v1 - v2;
    }

    function toInt(e) {
      switch (e) {
      case 'SN':
        return 0;
      case 'SH':
        return 1;
      case 'SA':
        return 2;
      case 'DN':
        return 3;
      case 'DH':
        return 4;
      case 'DA':
        return 5;
      case 'F':
        return 0;
      case 'E':
        return 1;
      case 'D':
        return 2;
      case 'C':
        return 3;
      case 'B':
        return 4;
      case 'A':
        return 5;
      case 'AA':
        return 6;
      case 'AAA':
        return 7;
      case 'FAILED':
        return -1;
      case 'NO':
        return 0;
      case 'ASSIST':
        return 1;
      case 'EASY':
        return 2;
      case 'YES':
        return 3;
      case 'HARD':
        return 4;
      case 'FC':
        return 5;
      case 'PERFECT':
        return 6;
      }
    }

    var records = {
%3$s};
    var recordIds = [%4$s];

    for (x in recordIds)
      orders[recordIds[x]] = new Object();

    createComparator('title', function (s1, s2) { return compareStringIgnoreCase(s1, s2); });
    createComparator('oldSong', function (b1, b2) {
      if (b1 == b2)
        return 0;
      else if (b1)
        return -1;
      else
        return 1;
    });
    createComparator('playMode', function (e1, e2) { return toInt(e1) - toInt(e2); });
    createComparator('difficulty', function (e1, e2) { return compareValue(e1, e2); });
    createComparator('djLevel', function (e1, e2) { return toInt(e1) - toInt(e2); });
    createComparator('exScore');
    createComparator('scoreRate');
    createComparator('totalNotes');
    createComparator('just');
    createComparator('great');
    createComparator('good');
    createComparator('bad');
    createComparator('poor');
    createComparator('clear', function (e1, e2) { return toInt(e1) - toInt(e2); });
    createComparator('maxCombo');
    createComparator('missCount', function (e1, e2) { return compareValue(e1, e2); });
    createComparator('playCount');
    setOrder('title', 1);
    setOrder('difficulty', 1);
    setOrder('playMode', 1);
    setOrder('missCount', 1);
  -->
  </script>
</body>
</html>